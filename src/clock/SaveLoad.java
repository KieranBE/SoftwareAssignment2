/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clock;

import java.io.BufferedWriter;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 * This is to let the user save or load alarms.
 *
 * @author Kieran
 */
public class SaveLoad extends javax.swing.JDialog {

    /**
     * Creates new form SaveLoad
     * Also creates the PQ's, frame and sets the load check
     */
    PriorityQueue<Alarm> q2;
    PriorityQueue<Alarm> q;
    final JFrame frame = new JFrame();
    int loadCheck = 0;

    public SaveLoad(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Load");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(81, 81, 81))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(145, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(132, 132, 132))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void PassQueue(PriorityQueue<Alarm> q){
        /**
         * Takes the PriorityQueue from the previous class
         */
        q2 = q;
    }
    
    public PriorityQueue<Alarm> GetQueue(){
        /**
         * Pass the new PriorityQueue to the previous class
         */
        return q;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        /**
         * Creates each string part for the Calendar
         */
        String BeginCal = "BEGIN:VCALENDAR";
        String Version = "VERSION:2.0";
        String ID = "PRODID:-//KieranEvans//Clock//EN";
        String BeginEv = "BEGIN:VEVENT";
        String UserID = "UID:08012568@uhi.ac.uk";
        String Stamp = "DTSTAMP:19970610T172345Z";
        String Start = "DTSTART:19970714T170000Z";
        String Summary = "SUMMARY:Alarms";
        String EndEv = "END:VEVENT";
        String EndCal = "END:VCALENDAR";
        
        /**
         * Adds them all together
         */
        String ICalendar = BeginCal + "\n" + Version + "\n" + ID + "\n" + 
        BeginEv + "\n" + UserID + "\n" + Stamp + "\n" + Start + "\n" + 
        Summary + "\n" + q2.saveCal() + EndEv + "\n" + EndCal ; 
        
        /**
         * Opens the file chooser to save a file
         */
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pick a file to overrite or save a new file");    
        
        int pass = fileChooser.showSaveDialog(frame);

        if (pass == JFileChooser.APPROVE_OPTION) 
        {
             /**
             * Sets the fileName to the selected file name 
             * then adds .ics to the end
             */
            File fileName = fileChooser.getSelectedFile();
            String nameOfFile = fileName.getAbsolutePath() + ".ics";
            try 
            {
                File file = new File(nameOfFile);

                if (!file.exists()) 
                {
                    file.createNewFile();
                }

                /**
                * Creates the file and buffered writer
                * then writes the previous string to the file
                */
                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write(ICalendar);
                bw.close();
                
            } 
            catch (IOException e) 
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        /**
         * Creates the new queue
         */
        q = new SortedArrayPriorityQueue<>(8);
        
        /**
         * Sets the location to load
         */
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pick a file to load");    
        
        int pass = fileChooser.showOpenDialog(frame);

        /**
         * Checks if the user selected a file
         */
        if (pass == JFileChooser.APPROVE_OPTION) 
        {
            File fileName = fileChooser.getSelectedFile();
            Scanner in = null;
            String alarm = "";
        try 
        {
            in = new Scanner(fileName);
            while(in.hasNext())
            {
                /**
                 * Checks for lines that have "ALARM" in it
                 */
                String line=in.nextLine();
                if(line.contains("ALARM"))
                {  
                    /**
                    * Removes "ALARM:","Z", and "T" from the stored part
                    */
                    alarm = line.replace("ALARM:","");
                    alarm = alarm.replace("Z","");
                    alarm = alarm.replace("T","");
                    
                    /**
                    * Sets each correct variable to each part of the alarm
                    */
                    int year = Integer.parseInt(alarm.substring(0, 4));
                    int month = Integer.parseInt(alarm.substring(4, 6));
                    int day = Integer.parseInt(alarm.substring(6, 8));
                    int hour = Integer.parseInt(alarm.substring(8, 10));
                    int minute = Integer.parseInt(alarm.substring(10, 12));
                    int second = Integer.parseInt(alarm.substring(12, 14));
                    
                    System.out.println(year + "/" + month + "/" + day  + " " +hour  + ":" +minute  + ":" +second);
                    
                    try{
                        q.add(second, minute, hour, day, month, year);
                    } catch (QueueOverflowException e) {
                        System.out.println("Add operation failed: " + e);
                    }
                }   
            }
            //System.out.println(alarm);
            
            /**
            * sets LoadCheck to 1, if load works, then closes
            */
            loadCheck = 1;
            dispose();
        } 
        catch (FileNotFoundException e) 
        {
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
 
    public int getLoadCheck(){
        /**
        * Returns load check
        */
        return loadCheck;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaveLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaveLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaveLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaveLoad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SaveLoad dialog = new SaveLoad(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
